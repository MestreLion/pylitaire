Brainstorm of new features and code ideas
Loosely ordered from "hanging fruits easy to do" to "deep stuff"

- "blue mask" highlight when dragging card over a droppable area

- Slots could perhaps be special cards handled by Game: they resize the same, also need collision detection
  with cards, have a highlight, etc. Or be handled separately from GUI

- Stacks can either be a simple (card.parent + card.child) chain in Card, handled by themselves, or an Class
  with head, tail, sprite, orientation, etc. If entity, could also represent slots: everything would be a stack
  empty stacks have slot rect, full stacks have rect.union(*card.rect). Would also handle expand/shrink height

- Idea for Enum: metaclass special *value* NONE (==None). Any member with this value is excluded from iterations.
  Enums define their own NONE *member*, if they want to, as NONE = Enum.NONE

- Background mode: create a MODE Enum, values AUTO, FILLCOLOR, TILE, SCALE, ORIGINAL
	FILLCOLOR = ignores file and use solid color fill
	TILE = repeats the image horizontally and vertically
	SCALE = resizes the image to fit the window
	ORIGINAL = just blit the original image at (0, 0).
	CENTER = same as ORIGINAL, but centered
	AUTO = SCALE if file is at least (800, 600), TILE otherwise

	center and original also fill the background first
	all file-based modes fallback to FILLCOLOR if file is not found

- TAB to load next theme. Show off, I know :)

- Resize
	main loop triggers graphics.resize(pygame.VIDEOSIZE, game)
	graphics.resize() do:
		g.window_size = size
		rebuild g.window
		g.background.resize(g.window_size)
		new playarea and cardsize
		g.slot.resize(cardsize)
		game.deck.resize(cardsize)
		game.resize(playarea)
		all known elements (menu, etc)
		for each object, object.resize()
	Deck.resize() - re-render svg and update each card rect

- Config file
	have a template at data/, use  it for factory defaults, copy to CONFIGDIR if not there
	window_size should be a separate file, so INI is never written (preserve comments)

	[background]
	basename (no extension. 'baize' in g)
	fillcolor (fillcolor. BGCOLOR in g)
	mode

	[theme]
	name (no extension, must be svg)

	[slot]
	basename

	[graphics]
	fullscreen (boolean)
	fullscreen_resolution (tuple, empty for desktop)

- Find a way to set all modules logging level without messing with root logger if main was imported
  Not sure if this is feasible (or needed) at all. Perhaps only when (and IF) I move all source to a
  package. And that's one huge IF ;)

- create statusbar (bottom), menu+info (at right side, a la arkanoid, or perhaps as button bar on top)
  gui module controls them, widgets register callbacks for certain events

- use custom exceptions to signal events from UI to Main loop/render: Quit, ClearScreen, etc.
  the ones who were formerly boolean flags such as done, clear

- Keep track of cards movements, and BACKSPACE to undo

- Cards "falling/bouncing" when win, a la Windows 3.1 Solitaire

- Rename the project to Pyukon Solitaire. Perhaps Pyleriot, given the artwork and behavior :)
  Also, game module seems to be pretty decoupled, and Yukon class easily modifiable to other games

- Make a working game (getting closer now!) :)
